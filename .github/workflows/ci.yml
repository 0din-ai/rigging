name: Lint, Typecheck, and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci:
    strategy:
        fail-fast: false
        matrix:
          python-version: ["3.9", "3.10", "3.11"]

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: abatilo/actions-poetry@e78f54a89cb052fff327414dd9ff010b5d2b4dbd

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local

    - name: Cache dependencies
      uses: actions/cache@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
      with:
        path: ./.venv
        key: venv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install package
      run: poetry install --all-extras

    - name: Validate version
      run: |
        POETRY_VERSION=$(poetry version -s)
        INIT_VERSION=$(poetry run python -c "import rigging; print(rigging.__version__)")

        if [ "$POETRY_VERSION" != "$INIT_VERSION" ]; then
          echo "Version mismatch: pyproject.toml ($POETRY_VERSION) != __init__.py ($INIT_VERSION)"
          exit 1
        fi

    - name: Lint
      run: poetry run ruff check --output-format=github rigging

    - name: Typecheck
      run: poetry run mypy rigging

    - name: Test
      run: poetry run pytest